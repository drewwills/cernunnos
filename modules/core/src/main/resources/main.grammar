<!--
   Copyright 2007 Andrew Wills

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<grammar>

	<!--
	  | Package:  [root]
	  +-->

	<phrase name="req" impl="org.danann.cernunnos.AttributePhrase"/>
	<doc entry="req">
		<description>Returns the value of the specified attribute from the TaskRequest.  An error will occur if the attribute is not present.</description>
		<example caption="Copies the document at 'http://www.google.com' to the file system location identified by the first argument on the command line">
			<pre><xmp><copy-file location="http://www.google.com" to-file="${req($1)}"/></xmp></pre>
		</example>
	</doc>

	<!--
	  | Package:  runtime
	  +-->

	<task name="crn" impl="org.danann.cernunnos.runtime.CernunnosTask"/>
	<doc entry="crn">
		<description>Reads, bootstrapps, and exececutes the specified Cernunnos script.</description>
	</doc>

	<task name="add-grammar" impl="org.danann.cernunnos.runtime.AddGrammarTask"/>
	<doc entry="add-grammar">
		<description>Reads a new Grammar based on the specified resource and overlays the current one with it.  Subtasks will be read and bootstrapped in light of this new Grammar.</description>
	</doc>

<!-- Not ready
	<task name="classpath" impl="org.danann.cernunnos.runtime.AddToClasspathTask"/>
	<doc entry="classpath">
		<description>Adds the path elements specified in PATH the classpath for subtasks.</description>
	</doc>
-->

	<task name="serialize-grammar" impl="org.danann.cernunnos.runtime.XmlGrammar$SerializeGrammarTask"/>
	<doc entry="serialize-grammar">
		<description>Creates an XML representation of the current grammar and sets it as the value of the 'Attributes.NODE' attribute.</description>
		<example caption="Creates the documentation you are reading (when executed from the root of a Cernunnos source tree)">
			<pre><xmp><serialize-grammar>
    <file-iterator dir="media/grammardoc" excludes="**/*.xsl">
        <copy-file to-dir="docs/grammardoc"/>
    </file-iterator>
    <xslt stylesheet="media/grammardoc/table-of-contents.xsl" to-file="docs/grammardoc/table-of-contents.html"/>
    <node-iterator xpath="entry">
        <xslt stylesheet="media/grammardoc/entry.xsl" to-file="docs/grammardoc/entries/${valueOf(name)}.html"/>
    </node-iterator>
</serialize-grammar></xmp></pre>
		</example>
	</doc>

	<task name="argument-iterator" impl="org.danann.cernunnos.runtime.ArgumentIteratorTask"/>
	<doc entry="argument-iterator">
		<description>Iterates over the command line arguments.  For each argument, this task sets the request attribute under ATTRIBUTE_NAME to the current argument, then invokes SUBTASKS.</description>
	</doc>

	<!--
	  | Package:  core
	  +-->

	<phrase name="jexl" impl="org.danann.cernunnos.core.JexlPhrase"/>
	<doc entry="jexl">
		<description>Evaluates the specified JEXL expression and returns the result.  All current request attributes will be visible.</description>
		<example caption="Writes 'Hello World!' to System.out">
			<pre><xmp><echo>${jexl('Hello' + ' World!')}</echo></xmp></pre>
		</example>
	</doc>

	<phrase name="seq" impl="org.danann.cernunnos.core.NamedSequencePhrase"/>
	<doc entry="seq">
		<description>Returns the next (Integer) value in the named sequence.  If the specified name is not recognized, the sequence will be created.</description>
	</doc>

	<phrase name="sysprop" impl="org.danann.cernunnos.core.SystemPropertyPhrase"/>
	<doc entry="sysprop">
		<description>Returns the value of the specified System property.</description>
	</doc>

	<phrase name="jndi" impl="org.danann.cernunnos.core.JndiLookupPhrase"/>
	<doc entry="jndi">
		<description>Returns the named object from JNDI.</description>
	</doc>

	<phrase name="not" impl="org.danann.cernunnos.core.NotPhrase"/>
	<doc entry="not">
		<description>Returns the opposite of the specified Boolean value.</description>
	</doc>

	<phrase name="null" impl="org.danann.cernunnos.core.NullPhrase"/>
	<doc entry="null">
		<description>Returns null.</description>
	</doc>

	<phrase name="isNull" impl="org.danann.cernunnos.core.IsNullPhrase"/>
	<doc entry="isNull">
		<description>Returns Boolean.TRUE if the specified VALUE is nulll, otherwise Boolean.FALSE.</description>
	</doc>

	<phrase name="newInstance" impl="org.danann.cernunnos.core.NewInstancePhrase"/>
	<doc entry="newInstance">
		<description>Attempts to create an instance of the specified class name using the default constructor.</description>
	</doc>

	<phrase name="const" impl="org.danann.cernunnos.core.ConstantPhrase"/>
	<doc entry="const">
		<description>Returns the value of the specified Java constant (viz. static field).</description>
	</doc>

	<phrase name="parseInt" impl="org.danann.cernunnos.core.ParseIntegerPhrase"/>
	<doc entry="parseInt">
		<description>Evaluates the Integer value of the specified EXPRESSION and returns it.</description>
	</doc>

	<phrase name="false" impl="org.danann.cernunnos.core.FalsePhrase"/>
	<doc entry="false">
		<description>Returns Boolean.FALSE.</description>
	</doc>

	<task name="with-attribute" impl="org.danann.cernunnos.core.SetAttributeTask"/>
	<doc entry="with-attribute">
		<description>Creates a request attribute with the specified name and value, then invokes subtasks.</description>
	</doc>

	<task name="properties" impl="org.danann.cernunnos.core.PropertiesTask"/>
	<doc entry="properties">
		<description>Reads the specified .properties file and makes all of its entries available to subtasks as request attributes.</description>
		<example caption="Reads database connection information from a properties file, makes a connection, writes each name from the 'users' table to the screen">
			<pre><xmp><properties location="build/WEB-INF/classes/properties/rdbm.properties">
    <sql-connection driver="${req(jdbcDriver)}" url="${req(jdbcUrl)}" username="${req(jdbcUser)}" password="${req(jdbcPassword)}">
		<sql-query>
        	<sql>SELECT user_name FROM users</sql>
            <subtasks>
            	<echo>${req(1)}, </echo>
			</subtasks>
		</sql-query>
    </sql-connection>
</properties></xmp></pre>
		</example>
	</doc>

	<task name="echo" impl="org.danann.cernunnos.core.EchoTask"/>
	<doc entry="echo">
		<description>Prints the specified message to the appropriate PrintStream (default is System.out).  You may optionally provide a message prefix and suffix.</description>
		<example caption="Reads database connection information from a properties file, makes a connection, writes each name from the 'users' table to the screen">
			<pre><xmp><properties location="build/WEB-INF/classes/properties/rdbm.properties">
    <sql-connection driver="${req(jdbcDriver)}" url="${req(jdbcUrl)}" username="${req(jdbcUser)}" password="${req(jdbcPassword)}">
		<sql-query>
        	<sql>SELECT user_name FROM users</sql>
            <subtasks>
            	<echo>${req(1)}, </echo>
			</subtasks>
		</sql-query>
    </sql-connection>
</properties></xmp></pre>
		</example>
	</doc>

	<task name="log" impl="org.danann.cernunnos.core.LogTask"/>
	<doc entry="log">
		<description>Writes the specified MESSAGE to the log with commons-logging.</description>
	</doc>

	<!-- Adds Carriage Return + Line Feed (Windows style) to the end of each message -->
	<task name="echo-ln" impl="org.danann.cernunnos.core.EchoTask" suffix="&#13;&#10;"/>
	<doc entry="echo-ln">
		<description>Prints the specified message, followed by a line feed, to the appropriate PrintStream (default is System.out).  You may optionally provide a message prefix.</description>
		<example caption="Parses a document from the resource at 'properties/db/data.xml', creates a node list from the expression '//table/name', and writes the text value of each node to System.out">
			<pre><xmp><node-iterator source="${doc(properties/db/data.xml)}" xpath="//table/name">
  <echo-ln>${valueOf(.)}</echo-ln>
</node-iterator></xmp></pre>
		</example>
	</doc>

	<task name="process" impl="org.danann.cernunnos.core.ExecuteProcessTask"/>
	<doc entry="process">
		<description>Invokes the specified process from the specified directory.</description>
		<example caption="Invokes the Ant tool to deploy a project.">
			<pre><xmp><process>ant deploy</process></xmp></pre>
		</example>
	</doc>

	<task name="invoke-method" impl="org.danann.cernunnos.core.InvokeMethodTask"/>
	<doc entry="invoke-method">
		<description>Invokes the specified METHOD on the specified OBJECT or CLASS.  If the specified method has a non-void return type, use ATTRIBUTE_NAME to gain access to the object returned when the method is invoked.</description>
	</doc>

	<task name="string-replace" impl="org.danann.cernunnos.core.StringReplaceTask"/>
	<doc entry="string-replace">
		<description>Replaces each occurance of REGEX in the specified STRING with the specified REPLACEMENT.  The resulting String will be registered as the 'Attributes.STRING' request attribute.</description>
	</doc>

	<task name="token-iterator" impl="org.danann.cernunnos.core.TokenIteratorTask"/>
	<doc entry="token-iterator">
		<description>Splits the specified STRING into tokens and iterates over them, performing SUBTASKS once for each token in the collection.</description>
	</doc>

	<task name="line-iterator" impl="org.danann.cernunnos.core.TokenIteratorTask" regex="&#10;"/>
	<doc entry="line-iterator">
		<description>Splits the specified STRING into lines (based on line feed character ASCII 10) and iterates over them, performing SUBTASKS once for each line in the collection.</description>
	</doc>

	<!--
	  | Package:  flow
	  +-->

	<task name="if" impl="org.danann.cernunnos.flow.IfTask"/>
	<doc entry="if">
		<description>Execustes SUBTASKS if the conditions of TEST are met.</description>
	</doc>

	<task name="choose" impl="org.danann.cernunnos.flow.ChooseTask"/>
	<doc entry="choose">
		<description>Performs the subtasks within the first WHEN element (&lt;when&gt;) whose 'test' attribute returns true.  You may optionally provide an OTHERWISE (&lt;otherwise&gt;) element whose subtasks will be performed if none of the WHEN conditions are met.</description>
	</doc>

	<task name="for-each" impl="org.danann.cernunnos.flow.ForEachTask"/>
	<doc entry="for-each">
		<description>Iterates over the elements in ITEMS, performing SUBTASKS once for each item.</description>
	</doc>

	<!--
	  | Package:  io
	  +-->

	<phrase name="file" impl="org.danann.cernunnos.io.FilePhrase"/>
	<doc entry="file">
		<description>Creates a java.io.File object from thbe specified LOCATION and returns it.</description>
	</doc>

	<task name="file-iterator" impl="org.danann.cernunnos.io.FileIteratorTask"/>
	<doc entry="file-iterator">
		<description>Builds a collection of file names within a specified directory and iterates over them.  Use optional pattern expressions to specify groups of files to include or exclude.</description>
		<example caption="Copies all files from 'some_folder' to 'another_folder'">
			<pre><xmp><file-iterator dir="some_folder">
  <copy-file to-dir="another_folder"/>
</file-iterator></xmp></pre>
		</example>
	</doc>

	<task name="mkdirs" impl="org.danann.cernunnos.io.MakeDirectoriesTask"/>
	<doc entry="mkdirs">
		<description>Creates any missing directories in the specified path on the local filesystem.</description>
	</doc>

	<task name="copy-file" impl="org.danann.cernunnos.io.CopyFileTask"/>
	<doc entry="copy-file">
		<description>Copies the specified file to the specified location, creating missing directories as necessary.  None of this task's reagents are required, but you will usually want to specify either TO_DIR or TO_FILE.</description>
		<example caption="Copies the document at 'http://www.google.com' to the file 'google_home.html'">
			<pre><xmp><copy-file location="http://www.google.com" to-file="google_home.html"/></xmp></pre>
		</example>
		<example caption="Copies all files from 'some_folder' to 'another_folder'">
			<pre><xmp><file-iterator dir="some_folder">
  <copy-file to-dir="another_folder"/>
</file-iterator></xmp></pre>
		</example>
	</doc>

	<task name="delete-file" impl="org.danann.cernunnos.io.DeleteFileTask"/>
	<doc entry="delete-file">
		<description>Deletes the specified file or directory.</description>
	</doc>

	<task name="write-file" impl="org.danann.cernunnos.io.WriteFileTask"/>
	<doc entry="write-file">
		<description>Writes the specified content to the specified file.</description>
	</doc>

	<task name="print-stream" impl="org.danann.cernunnos.io.OpenPrintStreamTask"/>
	<doc entry="print-stream">
		<description>Opens a PrintStream that writes to the specified file system location.</description>
		<example caption="Writes 'Hello World!' to the file 'hello.txt'">
			<pre><xmp><print-stream file="hello.txt">
  <echo>Hello World!</echo>
</print-stream></xmp></pre>
		</example>
	</doc>

	<task name="archive-iterator" impl="org.danann.cernunnos.io.ArchiveIteratorTask"/>
	<doc entry="archive-iterator">
		<description>Iterates over the entries found in the specified archive.  Each entry name will be registered as the request attribute 'Attributes.LOCATION' for subtasks.</description>
	</doc>

	<task name="extract-archive" impl="org.danann.cernunnos.io.ExtractArchiveTask"/>
	<doc entry="extract-archive">
		<description>Extracts the contents of the specified archive and writes them to the specified directory.</description>
	</doc>

	<!--
	  | Package:  net
	  +-->

	<phrase name="url" impl="org.danann.cernunnos.net.UrlPhrase"/>
	<doc entry="url">
		<description>Reads the resource at the specified location, constructs a new Phrase from the content, and returns the result of evaluating the Phrase.</description>
		<example caption="Connects to a database using the password stored in '/C:/passwd.txt', executes the SQL statement specified by the first argument on the command line">
			<pre><xmp><sql-connection driver="org.hsqldb.jdbcDriver" url="jdbc:hsqldb:hsql://localhost:8887" username="sa" password="${url(/C:/passwd.txt)}">
  <sql-statement sql="${req($1)}"/>
</sql-connection></xmp></pre>
		</example>
	</doc>

	<phrase name="contentsOf" impl="org.danann.cernunnos.net.ContentsOfPhrase"/>
	<doc entry="contentsOf">
		<description>Reads the resource at the specified location and returns the contents.</description>
	</doc>

	<!--
	  | Package:  sql
	  +-->

	<phrase name="sql" impl="org.danann.cernunnos.sql.SqlPhrase"/>
	<doc entry="sql">
		<description>Executes the specified SQL statement and returns the result.</description>
	</doc>

	<task name="sql-connection" impl="org.danann.cernunnos.sql.OpenConnectionTask"/>
	<doc entry="sql-connection">
		<description>Opens the specified RDBMS connection and registers it as a request attribute.  By default, it will be registered under OpenConnectionTask.DEFAULT_ATTRIBUTE_NAME.  Cernunnos SQL tasks will look for a connection under this name as well.  In most cases, therefore, neither parent nor child tasks need specify an attribute name for the Connection object.</description>
		<example caption="Connects to a database using the password stored in '/C:/passwd.txt', executes the SQL statement specified by the first argument on the command line">
			<pre><xmp><sql-connection driver="org.hsqldb.jdbcDriver" url="jdbc:hsqldb:hsql://localhost:8887" username="sa" password="${url(/C:/passwd.txt)}">
  <sql-statement sql="${req($1)}"/>
</sql-connection></xmp></pre>
		</example>
	</doc>

	<task name="sql-transaction" impl="org.danann.cernunnos.sql.TransactionTask"/>
	<doc entry="sql-transaction">
		<description>Subtasks that operate on the specified CONNECTION will be transactional.</description>
	</doc>

	<task name="sql-statement" impl="org.danann.cernunnos.sql.StatementTask"/>
	<doc entry="sql-statement">
		<description>Executes the specified SQL statement.  By default, this task looks for a Connection object as a request attribute under the name OpenConnectionTask.DEFAULT_ATTRIBUTE_NAME.</description>
		<example caption="Connects to a database using the password stored in '/C:/passwd.txt', executes the SQL statement specified by the first argument on the command line">
			<pre><xmp><sql-connection driver="org.hsqldb.jdbcDriver" url="jdbc:hsqldb:hsql://localhost:8887" username="sa" password="${url(/C:/passwd.txt)}">
  <sql-statement sql="${req($1)}"/>
</sql-connection></xmp></pre>
		</example>
	</doc>

	<task name="sql-query" impl="org.danann.cernunnos.sql.QueryTask"/>
	<doc entry="sql-query">
		<description>Performs a specified query, then invokes SUBTASKS once for each row in the result set.  For each iteration of SUBTASKS, column values will be registered as request attributes both under (1) the column name (all uppercase), and (2) the column index (starting with 1).</description>
		<example caption="Reads database connection information from a properties file, makes a connection, writes each name from the 'users' table to the screen">
			<pre><xmp><properties location="build/WEB-INF/classes/properties/rdbm.properties">
    <sql-connection driver="${req(jdbcDriver)}" url="${req(jdbcUrl)}" username="${req(jdbcUser)}" password="${req(jdbcPassword)}">
		<sql-query>
        	<sql>SELECT user_name FROM users</sql>
            <subtasks>
            	<echo>${req(1)}, </echo>
			</subtasks>
		</sql-query>
    </sql-connection>
</properties></xmp></pre>
		</example>
	</doc>

	<task name="sql-upsert" impl="org.danann.cernunnos.sql.UpsertTask"/>
	<doc entry="sql-upsert">
		<description>Executes the specified UPDATE statement.  If zero rows are affected, executes the specified INSERT statement.  By default, this task looks for a Connection object as a request attribute under the name OpenConnectionTask.DEFAULT_ATTRIBUTE_NAME.</description>
	</doc>

	<task name="column-iterator" impl="org.danann.cernunnos.sql.ColumnIteratorTask"/>
	<doc entry="column-iterator">
		<description>Iterates over the columns in a ResultSet, placing each column name under the request attribute 'SqlAttributes.COLUMN_NAME'.</description>
	</doc>

	<!--
	  | Package:  xml
	  +-->

	<phrase name="valueOf" impl="org.danann.cernunnos.xml.ValueOfPhrase"/>
	<doc entry="valueOf">
		<description>Returns the textual value of the specified XPath expression when evaluated against the specified node.</description>
		<example caption="Parses a document from the resource at 'properties/db/data.xml', creates a node list from the expression '//table/name', and writes the text value of each node to System.out">
			<pre><xmp><node-iterator source="${doc(properties/db/data.xml)}" xpath="//table/name">
  <echo-ln>${valueOf(.)}</echo-ln>
</node-iterator></xmp></pre>
		</example>
	</doc>

	<phrase name="singleNode" impl="org.danann.cernunnos.xml.SingleNodePhrase"/>
	<doc entry="singleNode">
		<description>Returns the first node that matches the specified XPATH expression when evaluated against the SOURCE node.</description>
	</doc>

	<phrase name="doc" impl="org.danann.cernunnos.xml.ReadDocumentPhrase"/>
	<doc entry="doc">
		<description>Reads an XML Document from the specified location and returns the root element.  The identified resource must be parsable XML.</description>
		<example caption="Parses a document from the resource at 'properties/db/data.xml', creates a node list from the expression '//table/name', and writes the text value of each node to System.out">
			<pre><xmp><node-iterator source="${doc(properties/db/data.xml)}" xpath="//table/name">
  <echo-ln>${valueOf(.)}</echo-ln>
</node-iterator></xmp></pre>
		</example>
	</doc>

	<phrase name="newDoc" impl="org.danann.cernunnos.xml.NewDocumentPhrase"/>
	<doc entry="newDoc">
		<description>Creates a new XML Document.  If provided, this task also creates a root element with the specified NAME.  This task return either the root element (if present) or the document node.</description>
	</doc>

	<phrase name="textNode" impl="org.danann.cernunnos.xml.TextNodePhrase"/>
	<doc entry="textNode">
		<description>Creates a new XML text node from the specified VALUE.</description>
	</doc>

	<phrase name="attributeNode" impl="org.danann.cernunnos.xml.AttributeNodePhrase"/>
	<doc entry="attributeNode">
		<description>Creates a new XML attribute node from the specified TUPLE, which must contain an equals character ('=') to separate attribute name and attribute value.</description>
	</doc>

	<phrase name="commentNode" impl="org.danann.cernunnos.xml.CommentNodePhrase"/>
	<doc entry="commentNode">
		<description>Creates a new XML comment node from the specified VALUE.</description>
	</doc>

	<task name="xslt" impl="org.danann.cernunnos.xml.XslTransformTask"/>
	<doc entry="xslt">
		<description>Executes the specified XSL Transformation.  By default, this task uses the value of the 'Attributes.NODE' request attribute as the XML source, and places the result of the trasformation under the same request attribute for subtasks.</description>
		<example caption="Creates the documentation you are reading (when executed from the root of a Cernunnos source tree)">
			<pre><xmp><serialize-grammar>
    <file-iterator dir="media/grammardoc" excludes="**/*.xsl">
        <copy-file to-dir="docs/grammardoc"/>
    </file-iterator>
    <xslt stylesheet="media/grammardoc/table-of-contents.xsl" to-file="docs/grammardoc/table-of-contents.html"/>
    <node-iterator xpath="entry">
        <xslt stylesheet="media/grammardoc/entry.xsl" to-file="docs/grammardoc/entries/${valueOf(name)}.html"/>
    </node-iterator>
</serialize-grammar></xmp></pre>
		</example>
	</doc>

	<task name="write-document" impl="org.danann.cernunnos.xml.WriteDocumentTask"/>
	<doc entry="write-document">
		<description>Writes the specified source node to the specified file system location.</description>
	</doc>

	<task name="node-iterator" impl="org.danann.cernunnos.xml.NodeIteratorTask"/>
	<doc entry="node-iterator">
		<description>Iterates over the node list resulting from the specified XPath expression.  For each node in the list, this task will set the specified request attribute and then execute its subtasks.</description>
		<example caption="Parses a document from the resource at 'properties/db/data.xml', creates a node list from the expression '//table/name', and writes the text value of each node to System.out">
			<pre><xmp><node-iterator source="${doc(properties/db/data.xml)}" xpath="//table/name">
  <echo-ln>${valueOf(.)}</echo-ln>
</node-iterator></xmp></pre>
		</example>
	</doc>

	<task name="delete-node" impl="org.danann.cernunnos.xml.DeleteNodeTask"/>
	<doc entry="delete-node">
		<description>Deletes the specified node from the document that contains it.  This change must be persisted by another task (if persistence is desired).</description>
	</doc>

	<task name="append-node" impl="org.danann.cernunnos.xml.AppendNodeTask"/>
	<doc entry="append-node">
		<description>Adds the specified XML content to the specified PARENT (at the end) or after the specified SIBLING.</description>
	</doc>

	<task name="prepend-node" impl="org.danann.cernunnos.xml.PrependNodeTask"/>
	<doc entry="prepend-node">
		<description>Adds the specified XML content to the specified PARENT (at the beginning) or before the specified SIBLING.</description>
	</doc>

</grammar>