<!--
   Copyright 2008 Andrew Wills

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
-->

<org.danann.cernunnos.runtime.EncloseGrammarTask name="Main">

    <entries>
    
        <!-- 
         | First define the 'grammar' and 'entry' tasks, which we will use to bootstrap everything else... 
         +-->
        <org.danann.cernunnos.runtime.DefineEntryTask name="entry" impl="org.danann.cernunnos.runtime.DefineEntryTask">
            <description>
                <p>Defines a new grammar entry of class IMPL with the specified NAME.</p>
                <p>NOTE:  <b>This task may only appear as a direct child of a <a href="Main-grammar-TASK.html">&lt;grammar&gt;</a> task</b>.</p>
            </description>
            <example caption="Creates a new Grammar object, adds the &lt;request-dispatcher&gt; entry, then returns it to the caller of this Cernunnos XML">
                <pre><xmp><grammar>
    <entries>
        <entry name="request-dispatcher" impl="org.danann.cernunnos.runtime.web.RequestDispatcherTask">
            <description>
                <p>Include the specified resource using a PortletRequestDispatcher.</p>
            </description>
        </entry>
    </entries>
    <subtasks>
        <return value="${grammar()}"/>
    </subtasks>
</grammar></xmp></pre>
            </example>
        </org.danann.cernunnos.runtime.DefineEntryTask>
        <entry name="grammar" impl="org.danann.cernunnos.runtime.EncloseGrammarTask">
            <description>
                <p>Overlays a new, empty grammar on top of the current grammar.  Use his task in conjunction with one or more <a href="Main-entry-TASK.html">&lt;entry&gt;</a> tasks.</p>
            </description>
            <example caption="Creates a new Grammar object, adds the &lt;request-dispatcher&gt; entry, then returns it to the caller of this Cernunnos XML">
                <pre><xmp><grammar>
    <entries>
        <entry name="request-dispatcher" impl="org.danann.cernunnos.runtime.web.RequestDispatcherTask">
            <description>
                <p>Include the specified resource using a PortletRequestDispatcher.</p>
            </description>
        </entry>
    </entries>
    <subtasks>
        <return value="${grammar()}"/>
    </subtasks>
</grammar></xmp></pre>
            </example>
        </entry>

        <!--
         | Package:  [root]
         +-->

        <entry name="req" impl="org.danann.cernunnos.AttributePhrase">
            <description>
                <p>Returns the value of the specified attribute from the TaskRequest.  An error will occur if the attribute is not present.</p>
                <p>The <code>${req}</code> phrase is the <i>default phrase implementation</i> in Cernunnos.  In other words, it's not necessary to name it explicitly to use it.  The expression '<code>${Attributes.LOCATION}</code>' is preferred, and is equivalent to '<code>${req(Attributes.LOCATION)}</code>.'</p>
            </description>
            <example caption="Copies the document at 'http://www.google.com' to the file system location identified by the first argument on the command line">
                <pre><xmp><copy-file location="http://www.google.com" to-file="${req($1)}"/></xmp></pre>
            </example>
        </entry>

        <!--
          | Package:  cache
          +-->
        <entry name="cache" impl="org.danann.cernunnos.cache.CacheTask">
            <description>
                <p>Caches the object returned by the factory Phrase using the specified cache-key and makes it availbe under the key attribute.</p>
            </description>
<example caption="Executues a SQL query and caches the result under a custom key">
                <pre><xmp><cache key="STRUCTURE_STYLESHEET_ID" cache-key="STRUCTURE_STYLESHEET_ID.${STRUCTURE_STYLESHEET_NAME}">
    <factory>
        <sql-query>
            <sql>
                SELECT SS_ID AS STRUCTURE_STYLESHEET_ID
                FROM UP_SS_STRUCT 
                WHERE SS_NAME = ?
            </sql>
            <parameter value="${STRUCTURE_STYLESHEET_NAME}"/>
            <subtasks>
                <return value="${STRUCTURE_STYLESHEET_ID}" />
            </subtasks>
        </sql-query>    
    </factory>
    <subtasks>
        <return value="${STRUCTURE_STYLESHEET_ID}" />
    </subtasks>
</cache></xmp></pre>
            </example>
          </entry>
          
          <entry name="concurrent" impl="org.danann.cernunnos.concurrent.ConcurrentTask">
             <description>
                 <p>Executes the subtasks concurrently using the thread pool from the request under the default attribute 
                 name 'ConcurrentAttributes.EXECUTOR_SERVICE'.</p>
                 <p>Use this task within a <a href="Main-thread-pool-TASK.html">&lt;thread-pool&gt;</a> task.</p>
             </description>
            <example caption="Creates an array of three URLs in JavaScript, then computes a checksum value ten times for one of the URLs in the array (distributed evenly) using a pool of five threads, writing the current count and checksum value to the console each time">
                <pre><xmp><js>
    <script>
        var urls = ['http://www.google.com/', 'http://www.amazon.com/', 'http://www.yahoo.com/'];
        ScriptAttributes.RESPONSE.setAttribute('urls', urls);
    </script>
    <subtasks>
        <thread-pool threads="5">
            <for-each items="${groovy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])}" attribute-name="num">
                <concurrent>
                    <echo-ln>${num}=${checksum(${js(urls[num % 3])})}</echo-ln>
                </concurrent>
            </for-each>
        </thread-pool>
    </subtasks>
</js></xmp></pre>
            </example>
        </entry>

         <!--
          | Package:  concurrent
          +-->
          <entry name="thread-pool" impl="org.danann.cernunnos.concurrent.ThreadPoolTask">
             <description>
                 <p>Creates a thread pool (ExecutorService) with a default size of 4 threads and stores it in a request 
                 attribute named 'ConcurrentAttributes.EXECUTOR_SERVICE' by default. The task will wait for all tasks 
                 in the thread pool to complete before completing itself.</p>
                 <p>Use a <a href="Main-concurrent-TASK.html">&lt;concurrent&gt;</a> task within this task.</p>
             </description>
            <example caption="Creates an array of three URLs in JavaScript, then computes a checksum value ten times for one of the URLs in the array (distributed evenly) using a pool of five threads, writing the current count and checksum value to the console each time">
                <pre><xmp><js>
    <script>
        var urls = ['http://www.google.com/', 'http://www.amazon.com/', 'http://www.yahoo.com/'];
        ScriptAttributes.RESPONSE.setAttribute('urls', urls);
    </script>
    <subtasks>
        <thread-pool threads="5">
            <for-each items="${groovy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])}" attribute-name="num">
                <concurrent>
                    <echo-ln>${num}=${checksum(${js(urls[num % 3])})}</echo-ln>
                </concurrent>
            </for-each>
        </thread-pool>
    </subtasks>
</js></xmp></pre>
            </example>
          </entry>
          
          <entry name="concurrent" impl="org.danann.cernunnos.concurrent.ConcurrentTask">
             <description>
                 <p>Executes the subtasks concurrently using the thread pool from the request under the default attribute 
                 name 'ConcurrentAttributes.EXECUTOR_SERVICE'.</p>
                 <p>Use this task within a <a href="Main-thread-pool-TASK.html">&lt;thread-pool&gt;</a> task.</p>
             </description>
            <example caption="Creates an array of three URLs in JavaScript, then computes a checksum value ten times for one of the URLs in the array (distributed evenly) using a pool of five threads, writing the current count and checksum value to the console each time">
                <pre><xmp><js>
    <script>
        var urls = ['http://www.google.com/', 'http://www.amazon.com/', 'http://www.yahoo.com/'];
        ScriptAttributes.RESPONSE.setAttribute('urls', urls);
    </script>
    <subtasks>
        <thread-pool threads="5">
            <for-each items="${groovy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])}" attribute-name="num">
                <concurrent>
                    <echo-ln>${num}=${checksum(${js(urls[num % 3])})}</echo-ln>
                </concurrent>
            </for-each>
        </thread-pool>
    </subtasks>
</js></xmp></pre>
            </example>
          </entry>

        <!--
          | Package:  core
          +-->

        <entry name="const" impl="org.danann.cernunnos.core.ConstantPhrase">
            <description>
                <p>Returns the value of the Java constant (<i>i.e.</i> static field) specified by FIELD.</p>
            </description>
            <deprecation since="1.0.0">
                <p>Use <a href="Main-groovy-PHRASE.html">${groovy(<i>&lt;field-name&gt;</i>)}</a> instead.</p>
            </deprecation>
        </entry>

        <entry name="echo" impl="org.danann.cernunnos.core.EchoTask">
            <description>
                <p>Prints the specified MESSAGE to the PrintStream specified by STREAM.  You may optionally provide a PREFIX and/or SUFFIX.</p>
            </description>
            <example caption="Reads database connection information from a properties file, makes a connection, writes each name from the 'users' table to the screen">
                <pre><xmp><properties location="build/WEB-INF/classes/properties/rdbm.properties">
    <sql-connection driver="${req(jdbcDriver)}" url="${req(jdbcUrl)}" username="${req(jdbcUser)}" password="${req(jdbcPassword)}">
        <sql-query>
            <sql>SELECT user_name FROM users</sql>
            <subtasks>
                <echo>${req(1)}, </echo>
            </subtasks>
        </sql-query>
    </sql-connection>
</properties></xmp></pre>
            </example>
        </entry>

        <!-- Adds Carriage Return + Line Feed (Windows style) to the end of each message -->
        <entry name="echo-ln" impl="org.danann.cernunnos.core.EchoTask">
            <description>
                <p>Prints the specified MESSAGE, followed by a line feed, to the PrintStream specified by STREAM.  You may optionally provide a PREFIX.</p>
            </description>
            <content-model suffix="${org.danann.cernunnos.core.SystemPropertyPhrase(line.separator)}"/>
            <example caption="Parses a document from the resource at 'properties/db/data.xml', creates a node list from the expression '//table/name', and writes the text value of each node to System.out">
                <pre><xmp><node-iterator source="${parseXml(properties/db/data.xml)}" xpath="//table/name">
  <echo-ln>${valueOf(.)}</echo-ln>
</node-iterator></xmp></pre>
            </example>
            <example caption="Invokes 'is-admin.crn' to deturmine if the user is an administrator, then either (1) deletes the file(s) specified on the command prompt or (2) gives the user appropriate feedback">
                <pre><xmp><choose>
    <when test="${crn(is-admin.crn)}">
        <argument-iterator>
            <delete-file file="${Attributes.STRING}"/>
        </argument-iterator>
    </when>
    <otherwise>
        <echo-ln>You are not authorized to perform the specified action.</echo-ln>
    </otherwise>
</choose></xmp></pre>
            </example>
        </entry>

        <entry name="escape" impl="org.danann.cernunnos.core.EscapePhrase">
            <description>
                <p>Returns the specified <code>EXPRESSION</code> as-is, without checking for or 
                evaluating nested phrases.  This feature is useful for manipulating file types 
                and syntaxes that also use '${}' delimiters for dynamic content (<i>e.g.</i> 
                pom.xml, build.xml, *.jsp).</p>
            </description>
            <example caption="Echos text that would fail to parse without ${escape}">
                <pre><xmp><echo-ln>${escape(This is ${some(text)} that ${includes} delimiters...)}</echo-ln></xmp></pre>
            </example>
        </entry>

        <entry name="false" impl="org.danann.cernunnos.core.FalsePhrase">
            <description>
                <p>Returns <code>Boolean.FALSE</code>.</p>
            </description>
            <deprecation since="1.0.0">
                <p>Use <a href="Main-groovy-PHRASE.html">${groovy(false)}</a> instead.</p>
            </deprecation>
        </entry>

        <entry name="handle-error" impl="org.danann.cernunnos.core.ErrorHandlingTask">
            <description>
                <p>Executes the tasks defined by TRY.  If an error 
                occurs, this task will attempt to match the runtime type of the 
                error with a CATCH_CLASS.  If there is a match, this task will 
                execute the associated CATCH_BLOCK;  if not, it will re-throw 
                the original error.</p>
                <p><strong>WARNING</strong>:  be careful using CATCH_CLASS.  It 
                may be difficult to guess the actual runtime type of the error 
                that will be caught, even if you understand where the Cernunnos 
                XML is likely to fail, since the original error may be wrapped 
                one or more times before it's compared to CATCH_CLASS.  The 
                &lt;handle-error&gt; task will, however, unwrap a 
                ManagedException and use its cause in comparisons.</p>
            </description>
            <example caption="Writes 'I caught something else...' to the console window">
                <pre><xmp><handle-error>
    <try>
        <groovy>
            <script>
                throw new RuntimeException('Not good.');
            </script>
        </groovy>
    </try>
    <catch class="${groovy(IllegalArgumentException.class)}">
        <echo-ln>I caught an IllegalArgumentException...</echo-ln>
    </catch>
    <catch>
        <echo-ln>I caught something else...</echo-ln>
    </catch>
</handle-error></xmp></pre>
            </example>
        </entry>

        <entry name="throw" impl="org.danann.cernunnos.core.ThrowTask">
            <description>
                <p>Throws the provided exception</p>
            </description>
            <example caption="Re-throws a handled exception">
                <pre><xmp><handle-error>
    <try>
        <groovy>
            <script>
                throw new RuntimeException('Not good.');
            </script>
        </groovy>
    </try>
    <catch class="${groovy(IllegalArgumentException.class)}">
        <echo-ln>I caught an IllegalArgumentException...</echo-ln>
    </catch>
    <catch>
        <echo-ln>I caught something else...</echo-ln>
        <throw/>
    </catch>
</handle-error></xmp></pre>
            </example>
        </entry>

        <entry name="invoke-method" impl="org.danann.cernunnos.core.InvokeMethodTask">
            <description>
                <p>Invokes the specified METHOD on the specified OBJECT or CLASS.  If the specified method has a non-void return type, the returned object will be registered as a request attribute under ATTRIBUTE_NAME.</p>
            </description>
            <deprecation since="1.0.0">
                <p>Use <a href="Main-groovy-TASK.html">&lt;groovy&gt;</a> and/or <a href="Main-groovy-Phrase.html">${groovy}</a> instead, or another supported scripting language.</p>
            </deprecation>
        </entry>

        <entry name="jexl" impl="org.danann.cernunnos.core.JexlPhrase">
            <description>
                <p>Evaluates the specified JEXL expression and returns the result.  All current request attributes will be visible.</p>
            </description>
            <example caption="Writes 'Hello World!' to System.out">
                <pre><xmp><echo>${jexl('Hello' + ' World!')}</echo></xmp></pre>
            </example>
        </entry>

        <entry name="isNull" impl="org.danann.cernunnos.core.IsNullPhrase">
            <description>
                <p>Returns <code>Boolean.TRUE</code> if the specified VALUE is null, otherwise <code>Boolean.FALSE</code>.</p>
            </description>
            <deprecation since="1.0.0">
                <p>Use <a href="Main-groovy-PHRASE.html">${groovy(<i>&lt;expression&gt;</i> == null)}</a> instead.</p>
            </deprecation>
        </entry>

        <entry name="jndi" impl="org.danann.cernunnos.core.JndiLookupPhrase">
            <description>
                <p>Returns the JNDI object defined by EXPRESSION.</p>
            </description>
            <example caption="Obtains a DataSource from JNDI, then opens a Connection, then executes an SQL statement using a parameter from a request attribute">
                <pre><xmp><with-attribute key="SqlAttributes.DATA_SOURCE" value="${jndi(java:comp/env/jdbc/PortalDb)}">
  <sql-connection>
    <sql-statement sql="DELETE FROM up_layout_struct WHERE user_id = ?">
      <parameter value="${sql(SELECT user_id FROM up_user WHERE user_name = '${req(username)}')}"/>
    </sql-statement>
  </sql-connection>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="line-iterator" impl="org.danann.cernunnos.core.TokenIteratorTask">
            <description>
                <p>Splits the specified STRING into lines (based on line feed character ASCII 10) and iterates over them, performing SUBTASKS once for each line in the collection.</p>
            </description>
            <content-model regex="${org.danann.cernunnos.core.SystemPropertyPhrase(line.separator)}"/>
            <example caption="Analyzes a Subversion log file, specified by ${$1}, for modified files;  writes the path of each modified file to the console once">
                <pre><xmp><with>
    <attribute key="fileSet">${groovy(new HashSet())}</attribute>
    <subtasks>
        <line-iterator string="${contents(${$1})}">
            <if test="${groovy(Attributes.STRING.matches('\\A   M .*'))}">
                <groovy><script>fileSet.add(Attributes.STRING)</script></groovy>
            </if>
        </line-iterator>
        <for-each items="${fileSet}">
            <echo-ln>${Attributes.OBJECT}</echo-ln>
        </for-each>
    </subtasks>
</with></xmp></pre>
            </example>
        </entry>

        <entry name="log" impl="org.danann.cernunnos.core.LogTask">
            <description>
                <p>Writes the specified MESSAGE to the log.</p>
                <p>The &lt;log&gt; task uses <a href="http://commons.apache.org/logging/" target="_new">Apache commons-logging</a>.  Consult the <a href="http://commons.apache.org/logging/guide.html" target="_new">commons-logging User Guide</a> for comprehensive documentation.</p>
            </description>
            <example caption="Writes a message at WARN level to the default logger">
                <pre><xmp><log level="warn">Watch out!</log></xmp></pre>
            </example>
            <example caption="Writes a message at INFO level (default) to a logger configured with the name 'myclass'">
                <pre><xmp><log logger-name="myclass">A useful piece of information...</log></xmp></pre>
            </example>
        </entry>

        <entry name="newInstance" impl="org.danann.cernunnos.core.NewInstancePhrase">
            <description>
                <p>Attempts to create an instance of the specified class name using the default (zero-argument) constructor, then return it.</p>
            </description>
            <deprecation since="1.0.0">
                <p>Use <a href="Main-groovy-PHRASE.html">${groovy(new <i>&lt;type-name&gt;</i>())}</a> instead.</p>
            </deprecation>
        </entry>

        <entry name="not" impl="org.danann.cernunnos.core.NotPhrase">
            <description>
                <p>Returns the opposite of the Boolean specified by VALUE.</p>
            </description>
            <deprecation since="1.0.0">
                <p>Use <a href="Main-groovy-PHRASE.html">${groovy(!<i>&lt;expression&gt;</i>)}</a> instead.</p>
            </deprecation>
        </entry>

        <entry name="null" impl="org.danann.cernunnos.core.NullPhrase">
            <description>
                <p>Returns <code>null</code>.</p>
            </description>
            <deprecation since="1.0.0">
                <p>Use <a href="Main-groovy-PHRASE.html">${groovy(null)}</a> instead.</p>
            </deprecation>
        </entry>

        <entry name="parseInt" impl="org.danann.cernunnos.core.ParseIntegerPhrase">
            <description>
                <p>Evaluates the <code>Integer</code> value of the specified EXPRESSION and returns it.</p>
            </description>
            <deprecation since="1.0.0">
                <p>Use <a href="Main-groovy-PHRASE.html">${groovy(Integer.parseInt(<i>&lt;expression&gt;</i>))}</a> instead.</p>
            </deprecation>
        </entry>

        <entry name="process" impl="org.danann.cernunnos.core.ExecuteProcessTask">
            <description>
                <p>Invokes the process specified by COMMAND.</p>
            </description>
            <example caption="Invokes the Ant tool to deploy a project.">
                <pre><xmp><process>ant deploy</process></xmp></pre>
            </example>
        </entry>

        <entry name="prompt" impl="org.danann.cernunnos.core.PromptTask">
            <description>
                <p>Promps the user for input within the shell.</p>
                <p><b>WARNING:</b>  this task is only suitable for Cernunnos XML executed from the command line.</p>
            </description>
            <example caption="Prompts the user for input (shown below)">
                <pre><xmp><prompt message="What is your favorite color?" default="yellow">
    <option regex="red"/>
    <option regex="blue"/>
    <option regex="green"/>
    <option regex="other"/>
    <subtasks>
        <echo-ln>inpt=${Attributes.OBJECT}</echo-ln>
    </subtasks>
</prompt></xmp>

Mar 30, 2008 10:35:23 PM org.danann.cernunnos.runtime.ScriptRunner run
INFO:
**************************************************
** Invoking ScriptRunner.run(Task, TaskRequest)
** TaskRequest contains 1 elements
**   - Attributes.ORIGIN=c:\HOME\danann\cernunnos\test.crn
**************************************************


What is your favorite color?
Allowable responses (must match one of these regular expressions):
        - red
        - blue
        - green
        - other
Default response:  yellow
Response:</pre>
            </example>
        </entry>

        <entry name="properties" impl="org.danann.cernunnos.core.PropertiesTask">
            <description>
                <p>Reads the properties file specified by <code>LOCATION</code> 
                and registers its contents as request attributes visible to 
                <code>SUBTASKS</code>.</p>
            </description>
            <example caption="Reads database connection information from a properties file, makes a connection, writes each name from the 'users' table to the screen">
                <pre><xmp><properties location="build/WEB-INF/classes/properties/rdbm.properties">
    <sql-connection driver="${req(jdbcDriver)}" url="${req(jdbcUrl)}" username="${req(jdbcUser)}" password="${req(jdbcPassword)}">
        <sql-query>
            <sql>SELECT user_name FROM users</sql>
            <subtasks>
                <echo>${req(1)}, </echo>
            </subtasks>
        </sql-query>
    </sql-connection>
</properties></xmp></pre>
            </example>
        </entry>

        <entry name="seq" impl="org.danann.cernunnos.core.NamedSequencePhrase">
            <description>
                <p>This Phrase <b>throws UnsupportedOperationException</b>.</p>
                <p>${seq} was flawed by design, and therefore it's function was removed entirely.</p>
            </description>
            <deprecation since="1.0.0">
                <p>Use <a href="Main-sequence-TASK.html">&lt;sequence&gt;</a> and <a href="Main-sequence-PHRASE.html">${sequence}</a> instead.</p>
            </deprecation>
        </entry>

        <entry name="sequence" impl="org.danann.cernunnos.core.SequencePhrase">
            <description>
                <p>Obtains the next value from the specified sequence.  See also <a href="Main-sequence-TASK.html">&lt;sequence&gt;</a>.</p>
            </description>
            <example caption="Prints 'a=1' through 'z=26' to standard output">
                <pre><xmp><sequence>
    <for-each items="${groovy('a'..'z')}">
        <echo-ln>${Attributes.OBJECT}=${sequence()}</echo-ln>
    </for-each>
</sequence></xmp></pre>
            </example>
            <example caption="Prints 'a=10' through 'z=-15' to standard output">
                <pre><xmp><sequence start="${groovy(10)}" increment="${groovy(-1)}">
    <for-each items="${groovy('a'..'z')}">
        <echo-ln>${Attributes.OBJECT}=${sequence()}</echo-ln>
    </for-each>
</sequence></xmp></pre>
            </example>
        </entry>

        <entry name="sequence" impl="org.danann.cernunnos.core.SequenceTask">
            <description>
                <p>Creates a new sequence for use with <a href="Main-sequence-PHRASE.html">${sequence}</a>.</p>
            </description>
            <example caption="Prints 'a=1' through 'z=26' to standard output">
                <pre><xmp><sequence>
    <for-each items="${groovy('a'..'z')}">
        <echo-ln>${Attributes.OBJECT}=${sequence()}</echo-ln>
    </for-each>
</sequence></xmp></pre>
            </example>
            <example caption="Prints 'a=10' through 'z=-15' to standard output">
                <pre><xmp><sequence start="${groovy(10)}" increment="${groovy(-1)}">
    <for-each items="${groovy('a'..'z')}">
        <echo-ln>${Attributes.OBJECT}=${sequence()}</echo-ln>
    </for-each>
</sequence></xmp></pre>
            </example>
        </entry>

        <entry name="string-replace" impl="org.danann.cernunnos.core.StringReplaceTask">
            <description>
                <p>Replaces each occurance of REGEX in the specified STRING with the specified REPLACEMENT.  The resulting String will be registered as the 'Attributes.STRING' request attribute.</p>
            </description>
            <example caption="Reads the file 'example.txt' into a String, replaces all instances of 'foo' with 'bar' and all instances of 'abc' with 'xyz' in the text, then writes the result back to 'example.txt'">
                <pre><xmp><with-attribute key="Attributes.STRING" value="${contents(example.txt)}">
    <string-replace regex="foo" replacement="bar">
        <string-replace regex="abc" replacement="xyz">
            <write-file file="example.txt"/>
        </string-replace>
    </string-replace>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="sysprop" impl="org.danann.cernunnos.core.SystemPropertyPhrase">
            <description>
                <p>Returns the value of the System property specified by PROPERTY.</p>
            </description>
            <example caption="Extracts Apache Tomcat version 6.0.16 to the current user's home directory">
                <pre><xmp><extract-archive location="apache-tomcat-6.0.16.zip" to-dir="${sysprop(user.home)}"/></xmp></pre>
            </example>
        </entry>

        <entry name="token-iterator" impl="org.danann.cernunnos.core.TokenIteratorTask">
            <description>
                <p>Splits the specified STRING into tokens and iterates over them, performing SUBTASKS once for each token in the collection.</p>
            </description>
            <example caption="Tests to see if the first argument on the command line contains the colon (':') character; if so, the argument is sepparated into tokens and a new directory is created using each token">
                <pre><xmp><with-attribute key="Attributes.STRING" value="${$1}">
    <if test="${groovy(Attributes.STRING.contains(':'))}">
        <token-iterator regex=":">
            <mkdirs path="${Attributes.STRING}"/>
        </token-iterator>
    </if>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="with" impl="org.danann.cernunnos.core.WithTask">
            <description>
                <p>Creates one or more request attributes using KEYS and VALUES, then invokes subtasks.</p>
                <p>See also: <a href="Main-with-attribute-TASK.html">&lt;with-attribute&gt;</a></p>
            </description>
            <example caption="Creates request attributes named 'foo' and 'myPath' then displays the value of each.">
                <pre><xmp><with>
    <attribute key="foo">bar</attribute>
    <attribute key="myPath">${Attributes.ORIGIN}</attribute>
    <subtasks>
        <echo-ln>foo=${foo}</echo-ln>
        <echo-ln>myPath=${myPath}</echo-ln>
    </subtasks>
</with></xmp></pre>
            </example>
        </entry>

        <entry name="with-attribute" impl="org.danann.cernunnos.core.SetAttributeTask">
            <description>
                <p>Creates a request attribute with the specified KEY and VALUE, then invokes subtasks.</p>
                <p>&lt;with-attribute&gt; can be thought of as a shorthand for <a href="Main-with-TASK.html">&lt;with&gt;</a> where only one attribute is needed.</p>
            </description>
            <example caption="Creates a new XML document containing '&lt;example foo=&quot;bar&quot;/&gt;', then writes it to the file 'example.xml'">
                <pre><xmp><with-attribute key="Attributes.NODE" value="${newDoc(example)}">
    <append-node node="${attributeNode(foo=bar)}"/>
    <write-document file="example.xml"/>
</with-attribute></xmp></pre>
            </example>
            <example caption="Takes a web address as a parameter (e.g. 'www.yahoo.com');  computes the checksum value of the document at the specified address, then copies that document to a local file called 'markup.html' and finally compares the checksum value of the local document against the previous, online checksum value">
                <pre><xmp><with-attribute key="onlineChecksum" value="${checksum(http://${$1})}">
    <copy-file location="http://${$1}/" to-file="markup.html"/>
    <with-attribute key="localChecksum" value="${checksum(markup.html)}">
        <groovy>
            <script>
                if (onlineChecksum == localChecksum) {
                    println 'Both checksum values are the same:  ' + onlineChecksum;
                } else {
                    println 'The checksum values are different:\n\tonline=' + onlineChecksum + '\n\tlocal=' + localChecksum;
                }
            </script>
        </groovy>
    </with-attribute>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <!--
          | Package:  cvs
          +-->

        <entry name="cvs-add" impl="org.danann.cernunnos.cvs.AddTask">
            <description>
                <p>Perfoms a CVS <code>add</code> operation.</p>
                <p>
                    <b>WARNING:</b>  The netbeans javacvs API seems to be a 
                    bit finicky about path inputs.  It's not hard to get a 
                    <code>ResponseException</code> with the message "The system 
                    cannot find the path specified."  For best results, use the 
                    backslash ('\') character on Windows for both 
                    <code>LOCAL_PATH</code> and <code>FILES</code>;  otherwise,
                    use the slash ('/') character.
                </p>
            </description>
            <example caption="Adds 'some-file.txt' and the entire contents of 'another-sub-dir' to the 'myProject' CVS module">
                <pre><xmp><cvs-client cvsroot=":pserver:user@host:/usr/local/cvsroot" encoded-password="change^me">
    <cvs-add local-path="C:\HOME\work\myProject">
        <file>some-sub-dir\some-file.txt</file>
        <file>some-sub-dir\another-sub-dir</file>
    </cvs-add>
</cvs-client></xmp></pre>
            </example>
        </entry>

        <entry name="cvs-checkout" impl="org.danann.cernunnos.cvs.CheckoutTask">
            <description>
                <p>Perfoms a CVS <code>checkout</code> ('co') operation.</p>
            </description>
            <example caption="Checks out the 'foo/bar' CVS module into the 'myProject' directory">
                <pre><xmp><cvs-client cvsroot=":pserver:user@host:/usr/local/cvsroot" encoded-password="change^me">
    <cvs-checkout local-path="/usr/local/person" dir="myProject" module="foo/bar"/>
</cvs-client></xmp></pre>
            </example>
        </entry>

        <entry name="cvs-client" impl="org.danann.cernunnos.cvs.CvsClientTask">
            <description>
                <p>Creates, configures, and opens an <code>org.netbeans.lib.cvsclient.Client</code> for interacting with a CVS server.</p>
                <p>
                    <code>&lt;cvs-client&gt;</code> registers two request attributes for 
                    subtasks:  (1) an instance of <code>Client</code> under the name 
                    specified by <code>ATTRIBUTE_NAME</code>;  and (2) the <code>CVSROOT</code> 
                    String under the name <code>CvaAttributes.CVSROOT</code>.  The latter 
                    is necessary for constructing the <code>GlobalOptions</code> objects 
                    required by CVS command classes. 
                </p>
            </description>
            <example caption="Checks out the 'foo/bar' CVS module into the 'myProject' directory">
                <pre><xmp><cvs-client cvsroot=":pserver:user@host:/usr/local/cvsroot" encoded-password="change^me">
    <cvs-checkout local-path="/usr/local/person" dir="myProject" module="foo/bar"/>
</cvs-client></xmp></pre>
            </example>
            <example caption="Adds 'some-file.txt' and the entire contents of 'another-sub-dir' to the 'myProject' CVS module">
                <pre><xmp><cvs-client cvsroot=":pserver:user@host:/usr/local/cvsroot" encoded-password="change^me">
    <cvs-add local-path="C:\HOME\work\myProject">
        <file>some-sub-dir\some-file.txt</file>
        <file>some-sub-dir\another-sub-dir</file>
    </cvs-add>
</cvs-client></xmp></pre>
            </example>
        </entry>

        <entry name="cvs-commit" impl="org.danann.cernunnos.cvs.CommitTask">
            <description>
                <p>Perfoms a CVS <code>commit</code> operation.</p>
            </description>
            <example caption="Commits the 'MyClass.java' file within the CVS module checked out to '/usr/local/person' with the message 'Fixing a bug'">
                <pre><xmp><cvs-client cvsroot=":pserver:user@host:/usr/local/cvsroot" encoded-password="change^me">
    <cvs-commit files="MyClass.java" local-path="/usr/local/person" message="Fixing a bug"/>
</cvs-client></xmp></pre>
            </example>
        </entry>

        <entry name="cvs-remove" impl="org.danann.cernunnos.cvs.RemoveTask">
            <description>
                <p>Perfoms a CVS <code>remove</code> operation.</p>
            </description>
            <example caption="Removes the files 'abc.txt' and 'xyz.txt' from the CVS module checked out at '/usr/local/person'">
                <pre><xmp><with-attribute key="myFiles" value="${groovy(['abc.txt', 'xyz.txt'])}">
    <cvs-client cvsroot=":pserver:user@host:/usr/local/cvsroot" encoded-password="change^me">
        <cvs-remove files="${myFiles}" local-path="/usr/local/person"/>
    </cvs-client>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <!--
          | Package:  flow
          +-->

        <entry name="choose" impl="org.danann.cernunnos.flow.ChooseTask">
            <description>
                <p>Performs the subtasks within the first WHEN element (&lt;when&gt;) whose 'test' attribute returns true.  You may optionally provide an OTHERWISE (&lt;otherwise&gt;) element whose subtasks will be performed if none of the WHEN conditions are met.</p>
            </description>
            <example caption="Invokes 'is-admin.crn' to deturmine if the user is an administrator, then either (1) deletes the file(s) specified on the command prompt or (2) gives the user appropriate feedback">
                <pre><xmp><choose>
    <when test="${crn(is-admin.crn)}">
        <argument-iterator>
            <delete-file file="${Attributes.STRING}"/>
        </argument-iterator>
    </when>
    <otherwise>
        <echo-ln>You are not authorized to perform the specified action.</echo-ln>
    </otherwise>
</choose></xmp></pre>
            </example>
        </entry>

        <entry name="crn" impl="org.danann.cernunnos.flow.CernunnosPhrase">
            <description>
                <p>Returns the product of evaluating the Cernunnos script 
                specified by <code>LOCATION</code>;  use the 
                <a href="Main-return-TASK.html">&lt;return&gt;</a> task to set the 
                return value within the specified script.</p>
            </description>
            <example caption="Invokes 'is-admin.crn' to deturmine if the user is an administrator, then either (1) deletes the file(s) specified on the command prompt or (2) gives the user appropriate feedback">
                <pre><xmp><choose>
    <when test="${crn(is-admin.crn)}">
        <argument-iterator>
            <delete-file file="${Attributes.STRING}"/>
        </argument-iterator>
    </when>
    <otherwise>
        <echo-ln>You are not authorized to perform the specified action.</echo-ln>
    </otherwise>
</choose></xmp></pre>
            </example>
        </entry>

        <entry name="crn" impl="org.danann.cernunnos.flow.CernunnosTask">
            <description>
                <p>Reads, bootstrapps, and exececutes the Cernunnos script specified by <code>LOCATION</code>.</p>
            </description>
            <example caption="Invokes the 'go-to-south-park.crn' file once for each of the specified characters">
                <pre><xmp><for-each items="${groovy(['Stan', 'Kyle', 'Cartman', 'Kenny'])}">
    <crn location="go-to-south-park.crn"/>
</for-each></xmp></pre>
            </example>
        </entry>

        <entry name="for-each" impl="org.danann.cernunnos.flow.ForEachTask">
            <description>
                <p>Iterates over the elements in ITEMS, performing SUBTASKS once for each item.</p>
            </description>
            <example caption="Invokes the 'go-to-south-park.crn' file once for each of the specified characters">
                <pre><xmp><for-each items="${groovy(['Stan', 'Kyle', 'Cartman', 'Kenny'])}">
    <crn location="go-to-south-park.crn"/>
</for-each></xmp></pre>
            </example>
        </entry>

        <entry name="if" impl="org.danann.cernunnos.flow.IfTask">
            <description>
                <p>Execustes SUBTASKS if the TEST expression evaluates to <code>Boolean.TRUE</code>.</p>
            </description>
            <example caption="Tests to see if the first argument on the command line contains the colon (':') character; if so, the argument is sepparated into tokens and a new directory is created using each token">
                <pre><xmp><with-attribute key="Attributes.STRING" value="${$1}">
    <if test="${groovy(Attributes.STRING.contains(':'))}">
        <token-iterator regex=":">
            <mkdirs path="${Attributes.STRING}"/>
        </token-iterator>
    </if>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="return" impl="org.danann.cernunnos.flow.ReturnTask">
            <description>
                <p>Sets the return value of the current Cernunnos operation to the specified VALUE.</p>
            </description>
            <example caption="Creates a new Grammar object, adds the &lt;request-dispatcher&gt; entry, then returns it to the caller of this Cernunnos XML">
                <pre><xmp><grammar>
    <entries>
        <entry name="request-dispatcher" impl="org.danann.cernunnos.runtime.web.RequestDispatcherTask">
            <description>
                <p>Include the specified resource using a PortletRequestDispatcher.</p>
            </description>
        </entry>
    </entries>
    <subtasks>
        <return value="${grammar()}"/>
    </subtasks>
</grammar></xmp></pre>
            </example>
        </entry>

        <!--
          | Package:  io
          +-->

        <entry name="archive-iterator" impl="org.danann.cernunnos.io.ArchiveIteratorTask">
            <description>
                <p>Iterates over the entries found in the archive specified by 
                <code>LOCATION</code>.  Each entry name will be registered as 
                the request attribute 'Attributes.LOCATION' for subtasks.</p>
            </description>
        </entry>

        <entry name="checksum" impl="org.danann.cernunnos.io.ChecksumPhrase">
            <description>
                <p>Returns the <code>Checksum</code> value of the resource specified 
                by <code>LOCATION</code>.  This component currently uses the 
                <a href="http://en.wikipedia.org/wiki/Adler-32" target="_new">Adler32 
                algorythim</a>.</p>
            </description>
            <example caption="Takes a web address as a parameter (e.g. 'www.yahoo.com');  computes the checksum value of the document at the specified address, then copies that document to a local file called 'markup.html' and finally compares the checksum value of the local document against the previous, online checksum value">
                <pre><xmp><with-attribute key="onlineChecksum" value="${checksum(http://${$1})}">
    <copy-file location="http://${$1}/" to-file="markup.html"/>
    <with-attribute key="localChecksum" value="${checksum(markup.html)}">
        <groovy>
            <script>
                if (onlineChecksum == localChecksum) {
                    println 'Both checksum values are the same:  ' + onlineChecksum;
                } else {
                    println 'The checksum values are different:\n\tonline=' + onlineChecksum + '\n\tlocal=' + localChecksum;
                }
            </script>
        </groovy>
    </with-attribute>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="copy-file" impl="org.danann.cernunnos.io.CopyFileTask">
            <description>
                <p>Copies the resource specified by <code>LOCATION</code> to the 
                chosen location, creating missing directories as necessary.  None 
                of this task's reagents are strictly required, but you will 
                normally want to specify either <code>TO_DIR</code> or 
                <code>TO_FILE</code> at a minimum.</p>
            </description>
            <example caption="Copies the document at 'http://www.google.com' to the file 'google_home.html'">
                <pre><xmp><copy-file location="http://www.google.com" to-file="google_home.html"/></xmp></pre>
            </example>
            <example caption="Copies all files from 'some_folder' to 'another_folder'">
                <pre><xmp><file-iterator dir="some_folder">
  <copy-file to-dir="another_folder"/>
</file-iterator></xmp></pre>
            </example>
        </entry>

        <entry name="delete-file" impl="org.danann.cernunnos.io.DeleteFileTask">
            <description>
                <p>Deletes the specified file or directory.</p>
            </description>
            <example caption="Invokes 'is-admin.crn' to deturmine if the user is an administrator, then either (1) deletes the file(s) specified on the command prompt or (2) gives the user appropriate feedback">
                <pre><xmp><choose>
    <when test="${crn(is-admin.crn)}">
        <argument-iterator>
            <delete-file file="${Attributes.STRING}"/>
        </argument-iterator>
    </when>
    <otherwise>
        <echo-ln>You are not authorized to perform the specified action.</echo-ln>
    </otherwise>
</choose></xmp></pre>
            </example>
        </entry>

        <entry name="extract-archive" impl="org.danann.cernunnos.io.ExtractArchiveTask">
            <description>
                <p>Extracts the contents of the archive specified by <code>LOCATION</code> 
                and writes them to the chosen directory.</p>
            </description>
            <example caption="Extracts Apache Tomcat version 6.0.16 to the current user's home directory">
                <pre><xmp><extract-archive location="apache-tomcat-6.0.16.zip" to-dir="${sysprop(user.home)}"/></xmp></pre>
            </example>
        </entry>

        <entry name="file" impl="org.danann.cernunnos.io.FilePhrase">
            <description>
                <p>Creates a <code>java.io.File</code> object from the specified LOCATION and returns it.</p>
            </description>
        </entry>

        <entry name="file-iterator" impl="org.danann.cernunnos.io.FileIteratorTask">
            <description>
                <p>Builds a collection of file names within a specified directory and iterates over them.  Use optional pattern expressions to specify groups of files to include or exclude.</p>
            </description>
            <example caption="Copies all files from 'some_folder' to 'another_folder'">
                <pre><xmp><file-iterator dir="some_folder">
  <copy-file to-dir="another_folder"/>
</file-iterator></xmp></pre>
            </example>
        </entry>

        <entry name="mkdirs" impl="org.danann.cernunnos.io.MakeDirectoriesTask">
            <description>
                <p>Creates any missing directories in the specified path on the local filesystem.</p>
            </description>
            <example caption="Tests to see if the first argument on the command line contains the colon (':') character; if so, the argument is sepparated into tokens and a new directory is created using each token">
                <pre><xmp><with-attribute key="Attributes.STRING" value="${$1}">
    <if test="${groovy(Attributes.STRING.contains(':'))}">
        <token-iterator regex=":">
            <mkdirs path="${Attributes.STRING}"/>
        </token-iterator>
    </if>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="print-stream" impl="org.danann.cernunnos.io.OpenPrintStreamTask">
            <description>
                <p>Opens a PrintStream that writes to the specified file system location.</p>
            </description>
            <example caption="Writes 'Hello World!' to the file 'hello.txt'">
                <pre><xmp><print-stream file="hello.txt">
  <echo>Hello World!</echo>
</print-stream></xmp></pre>
            </example>
        </entry>

        <entry name="write-file" impl="org.danann.cernunnos.io.WriteFileTask">
            <description>
                <p>Writes the specified content to the specified file.</p>
            </description>
            <example caption="Reads the file 'example.txt' into a String, replaces all instances of 'foo' with 'bar' and all instances of 'abc' with 'xyz' in the text, then writes the result back to 'example.txt'">
                <pre><xmp><with-attribute key="Attributes.STRING" value="${contents(example.txt)}">
    <string-replace regex="foo" replacement="bar">
        <string-replace regex="abc" replacement="xyz">
            <write-file file="example.txt"/>
        </string-replace>
    </string-replace>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <!--
          | Package:  ldap
          +-->

        <entry name="ldap-search" impl="org.danann.cernunnos.ldap.SearchTask">
            <description>
                <p>Performs the specified search within an LDAP data source and iterates over the results, performing SUBTASKS once for each entry.</p>
                <p>Cernunnos' LDAP features are based off of <a href="http://www.springframework.org/ldap" target="_new">Spring LDAP</a>.  Spring LDAP is a Java library for simplifying LDAP operations, based on the pattern of Spring's JdbcTemplate.</p>
            </description>
        </entry>

        <!--
          | Package:  net
          +-->

        <entry name="contents" impl="org.danann.cernunnos.net.ContentsPhrase">
            <description>
                <p>Reads the resource at the specified location and returns the contents as a <code>String</code>.</p>
            </description>
            <example caption="Reads the file 'example.txt' into a String, replaces all instances of 'foo' with 'bar' and all instances of 'abc' with 'xyz' in the text, then writes the result back to 'example.txt'">
                <pre><xmp><with-attribute key="Attributes.STRING" value="${contents(example.txt)}">
    <string-replace regex="foo" replacement="bar">
        <string-replace regex="abc" replacement="xyz">
            <write-file file="example.txt"/>
        </string-replace>
    </string-replace>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="contentsOf" impl="org.danann.cernunnos.net.ContentsOfPhrase">
            <description>
                <p>Reads the resource at the specified location and returns the contents as a <code>String</code>.</p>
            </description>
            <deprecation since="1.1.0">
                <p>Use <a href="Main-contents-PHRASE.html">${contents}</a> instead, since it supports the standard ResourceHelper approach.</p>
            </deprecation>
        </entry>

        <entry name="phrase" impl="org.danann.cernunnos.net.ParsePhrasePhrase">
            <description>
                <p>Reads the resource at the specified location, constructs a new Phrase from the content, and returns the result of evaluating the Phrase.</p>
            </description>
            <example caption="Connects to a database using the password stored in '/C:/passwd.txt', executes the SQL statement specified by the first argument on the command line">
                <pre><xmp><sql-connection driver="org.hsqldb.jdbcDriver" url="jdbc:hsqldb:hsql://localhost:8887" username="sa" password="${phrase(/C:/passwd.txt)}">
  <sql-statement sql="${req($1)}"/>
</sql-connection></xmp></pre>
            </example>
        </entry>

        <entry name="url" impl="org.danann.cernunnos.net.ParsePhrasePhrase">
            <description>
                <p>Reads the resource at the specified location, constructs a new Phrase from the content, and returns the result of evaluating the Phrase.</p>
            </description>
            <deprecation since="1.0.0">
                <p>Use <a href="Main-phrase-PHRASE.html">${phrase}</a> instead.</p>
            </deprecation>
        </entry>

        <!--
          | Package:  runtime
          +-->

        <entry name="add-grammar" impl="org.danann.cernunnos.runtime.AddGrammarTask">
            <description>
                <p>Reads a new Grammar based on the specified resource and overlays the current one with it.  Subtasks will be read and bootstrapped in light of this new Grammar.</p>
            </description>
            <deprecation since="1.0.0">
                <p>Use <a href="Main-grammar-TASK.html">&lt;grammar&gt;</a> and <a href="Main-entry-TASK.html">&lt;entry&gt;</a> instead.</p>
            </deprecation>
        </entry>

        <entry name="argument-iterator" impl="org.danann.cernunnos.runtime.ArgumentIteratorTask">
            <description>
                <p>Iterates over the command line arguments.  For each argument, this task sets the request attribute under ATTRIBUTE_NAME to the current argument, then invokes SUBTASKS.</p>
            </description>
            <example caption="Invokes 'is-admin.crn' to deturmine if the user is an administrator, then either (1) deletes the file(s) specified on the command prompt or (2) gives the user appropriate feedback">
                <pre><xmp><choose>
    <when test="${crn(is-admin.crn)}">
        <argument-iterator>
            <delete-file file="${Attributes.STRING}"/>
        </argument-iterator>
    </when>
    <otherwise>
        <echo-ln>You are not authorized to perform the specified action.</echo-ln>
    </otherwise>
</choose></xmp></pre>
            </example>
        </entry>

        <entry name="grammar" impl="org.danann.cernunnos.runtime.GrammarPhrase">
            <description>
                <p>Returns a reference to the Grammar object that created this phrase.</p>
            </description>
            <example caption="Creates a new Grammar object, adds the &lt;request-dispatcher&gt; entry, then returns it to the caller of this Cernunnos XML">
                <pre><xmp><grammar>
    <entries>
        <entry name="request-dispatcher" impl="org.danann.cernunnos.runtime.web.RequestDispatcherTask">
            <description>
                <p>Include the specified resource using a PortletRequestDispatcher.</p>
            </description>
        </entry>
    </entries>
    <subtasks>
        <return value="${grammar()}"/>
    </subtasks>
</grammar></xmp></pre>
            </example>
        </entry>

        <entry name="serialize-grammar" impl="org.danann.cernunnos.runtime.SerializeGrammarTask">
            <description>
                <p>Creates an XML representation of the current grammar and sets it as the value of the 'Attributes.NODE' attribute.</p>
            </description>
            <example caption="Creates the documentation you are reading (when executed from the root of a Cernunnos source tree)">
                <pre><xmp><serialize-grammar>
    <file-iterator dir="media/grammardoc" excludes="**/*.xsl">
        <copy-file to-dir="docs/grammardoc"/>
    </file-iterator>
    <xslt stylesheet="media/grammardoc/table-of-contents.xsl" to-file="docs/grammardoc/table-of-contents.html"/>
    <node-iterator xpath="entry">
        <xslt stylesheet="media/grammardoc/entry.xsl" to-file="docs/grammardoc/entries/${valueOf(name)}.html"/>
    </node-iterator>
</serialize-grammar></xmp></pre>
            </example>
        </entry>

        <!--
          | Package:  script
          +-->

        <entry name="groovy" impl="org.danann.cernunnos.script.ScriptPhrase">
            <description>
                <p>Returns the value of the specified Groovy EXPRESSION.</p>
                <p>
                	<a href="http://groovy.codehaus.org/" style="float: right" target="_new"><img src="../groovy-logo.png" alt="Groovy Logo" style="border-style: none"/></a>
                	Among dozens of things we can say about <a href="http://groovy.codehaus.org/" target="_new">Groovy</a>, it is a <i>dynamic 
                	language</i> for the Java platform.  This feature -- dynamic -- offers tremendous synergy with Cernunnos because it allows 
                	us to evaluate expressions at runtime and then execute them.  This feature is especially handy for tasks like 
                	<a href="Main-if-TASK.html">&lt;if&gt;</a> and <a href="Main-choose-TASK.html">&lt;choose&gt;</a> that rely on conditionals.
                </p>
                <p>
					The Groovy Language is also <i>concise</i>, <i>modern</i>, and <i>powerful</i>.  Its syntax is based on regular Java syntax, 
					so Java developers will experience little difficulty getting up to speed.  Since it runs on the JVM, Groovy also integrates 
					with exisiting Java code seamlessly.   
                </p>
            </description>
            <content-model engine="${org.danann.cernunnos.script.ScriptEnginePhrase(groovy)}"/>
            <example caption="Tests to see if the first argument on the command line contains the colon (':') character; if so, the argument is sepparated into tokens and a new directory is created using each token">
                <pre><xmp><with-attribute key="Attributes.STRING" value="${$1}">
    <if test="${groovy(Attributes.STRING.contains(':'))}">
        <token-iterator regex=":">
            <mkdirs path="${Attributes.STRING}"/>
        </token-iterator>
    </if>
</with-attribute></xmp></pre>
            </example>
            <example caption="Removes the files 'abc.txt' and 'xyz.txt' from the CVS module checked out at '/usr/local/person'">
                <pre><xmp><with-attribute key="myFiles" value="${groovy(['abc.txt', 'xyz.txt'])}">
    <cvs-client cvsroot=":pserver:user@host:/usr/local/cvsroot" encoded-password="change^me">
        <cvs-remove files="${myFiles}" local-path="/usr/local/person"/>
    </cvs-client>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="groovy" impl="org.danann.cernunnos.script.ScriptTask">
            <description>
                <p>Invokes operations specified by SCRIPT using the groovy engine.</p>
                <p>
                	<a href="http://groovy.codehaus.org/" style="float: right" target="_new"><img src="../groovy-logo.png" alt="Groovy Logo" style="border-style: none"/></a>
                	Among dozens of things we can say about <a href="http://groovy.codehaus.org/" target="_new">Groovy</a>, it is a <i>dynamic 
                	language</i> for the Java platform.  This feature -- dynamic -- offers tremendous synergy with Cernunnos because it allows 
                	us to evaluate expressions at runtime and then execute them.  This feature is especially handy for tasks like 
                	<a href="Main-if-TASK.html">&lt;if&gt;</a> and <a href="Main-choose-TASK.html">&lt;choose&gt;</a> that rely on conditionals.
                </p>
                <p>
					The Groovy Language is also <i>concise</i>, <i>modern</i>, and <i>powerful</i>.  Its syntax is based on regular Java syntax, 
					so Java developers will experience little difficulty getting up to speed.  Since it runs on the JVM, Groovy also integrates 
					with exisiting Java code seamlessly.   
                </p>
            </description>
            <content-model engine="${org.danann.cernunnos.script.ScriptEnginePhrase(groovy)}"/>
            <example caption="Takes a web address as a parameter (e.g. 'www.yahoo.com');  computes the checksum value of the document at the specified address, then copies that document to a local file called 'markup.html' and finally compares the checksum value of the local document against the previous, online checksum value">
                <pre><xmp><with-attribute key="onlineChecksum" value="${checksum(http://${$1})}">
    <copy-file location="http://${$1}/" to-file="markup.html"/>
    <with-attribute key="localChecksum" value="${checksum(markup.html)}">
        <groovy>
            <script>
                if (onlineChecksum == localChecksum) {
                    println 'Both checksum values are the same:  ' + onlineChecksum;
                } else {
                    println 'The checksum values are different:\n\tonline=' + onlineChecksum + '\n\tlocal=' + localChecksum;
                }
            </script>
        </groovy>
    </with-attribute>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="js" impl="org.danann.cernunnos.script.ScriptPhrase">
            <description>
                <p>Returns the value of the specified JavaScript EXPRESSION.</p>
            </description>
            <content-model engine="${org.danann.cernunnos.script.ScriptEnginePhrase(js)}"/>
            <example caption="Creates an array of three URLs in JavaScript, then computes a checksum value ten times for one of the URLs in the array (distributed evenly) using a pool of five threads, writing the current count and checksum value to the console each time">
                <pre><xmp><js>
    <script>
        var urls = ['http://www.google.com/', 'http://www.amazon.com/', 'http://www.yahoo.com/'];
        ScriptAttributes.RESPONSE.setAttribute('urls', urls);
    </script>
    <subtasks>
        <thread-pool threads="5">
            <for-each items="${groovy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])}" attribute-name="num">
                <concurrent>
                    <echo-ln>${num}=${checksum(${js(urls[num % 3])})}</echo-ln>
                </concurrent>
            </for-each>
        </thread-pool>
    </subtasks>
</js></xmp></pre>
            </example>
        </entry>

        <entry name="js" impl="org.danann.cernunnos.script.ScriptTask">
            <description>
                <p>Invokes operations specified by SCRIPT using the JavaScript engine.</p>
            </description>
            <content-model engine="${org.danann.cernunnos.script.ScriptEnginePhrase(js)}"/>
            <example caption="Creates an array of three URLs in JavaScript, then computes a checksum value ten times for one of the URLs in the array (distributed evenly) using a pool of five threads, writing the current count and checksum value to the console each time">
                <pre><xmp><js>
    <script>
        var urls = ['http://www.google.com/', 'http://www.amazon.com/', 'http://www.yahoo.com/'];
        ScriptAttributes.RESPONSE.setAttribute('urls', urls);
    </script>
    <subtasks>
        <thread-pool threads="5">
            <for-each items="${groovy([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])}" attribute-name="num">
                <concurrent>
                    <echo-ln>${num}=${checksum(${js(urls[num % 3])})}</echo-ln>
                </concurrent>
            </for-each>
        </thread-pool>
    </subtasks>
</js></xmp></pre>
            </example>
        </entry>

        <!--
          | Package:  spring
          +-->

        <entry name="spring-beans" impl="org.danann.cernunnos.spring.ApplicationContextTask">
            <description>
                <p>Creates a spring context from the XML bean definition file 
                specified by <code>LOCATION</code>, registers all the beans 
                contained therein as request attributes, then invokes 
                <code>SUBTASKS</code>.</p>
            </description>
            <example caption="Loads a Spring bean container defined in 'datasourceContext.xml' which contains a DataSource, then begins a transaction, then queries that DataSource for the 'user_id' associated with the 'admin' account, then performs an 'upsert' operation on the 'up_user_profile' table">
                <pre><xmp><spring-beans location="datasourceContext.xml">
    <with-attribute key="SqlAttributes.DATA_SOURCE" value="${PortalDb}">
        <sql-transaction>
            <sql-upsert>
                <update-statement>UPDATE up_user_profile SET profile_name = 'HTML browser profile' WHERE user_id = ?</update-statement>
                <insert-statement>INSERT INTO up_user_profile(user_id, profile_id, profile_name, description, layout_id, structure_ss_id, theme_ss_id) VALUES(?, 1, 'HTML browser profile', 'A sample profile for common web browsers', 1, 1 1)</insert-statement>
                <parameter value="${sql(SELECT user_id FROM up_user WHERE user_name = 'admin')}"/>
            </sql-upsert>
        </sql-transaction>
    </with-attribute>
</spring-beans></xmp></pre>
            </example>
        </entry>

        <!--
          | Package:  sql
          +-->

        <entry name="column-iterator" impl="org.danann.cernunnos.sql.ColumnIteratorTask">
            <description>
                <p>Iterates over the columns in a ResultSet, placing each column name under the request attribute 'SqlAttributes.COLUMN_NAME'.</p>
            </description>
        </entry>

        <entry name="sql" impl="org.danann.cernunnos.sql.SqlPhrase">
            <description>
                <p>Executes the specified SQL statement and returns the result.</p>
            </description>
            <example caption="Loads a Spring bean container defined in 'datasourceContext.xml' which contains a DataSource, then begins a transaction, then queries that DataSource for the 'user_id' associated with the 'admin' account, then performs an 'upsert' operation on the 'up_user_profile' table">
                <pre><xmp><spring-beans location="datasourceContext.xml">
    <with-attribute key="SqlAttributes.DATA_SOURCE" value="${PortalDb}">
        <sql-transaction>
            <sql-upsert>
                <update-statement>UPDATE up_user_profile SET profile_name = 'HTML browser profile' WHERE user_id = ?</update-statement>
                <insert-statement>INSERT INTO up_user_profile(user_id, profile_id, profile_name, description, layout_id, structure_ss_id, theme_ss_id) VALUES(?, 1, 'HTML browser profile', 'A sample profile for common web browsers', 1, 1 1)</insert-statement>
                <parameter value="${sql(SELECT user_id FROM up_user WHERE user_name = 'admin')}"/>
            </sql-upsert>
        </sql-transaction>
    </with-attribute>
</spring-beans></xmp></pre>
            </example>
        </entry>

        <entry name="sql-connection" impl="org.danann.cernunnos.sql.OpenConnectionTask">
            <description>
                <p>Opens the specified RDBMS connection and registers it as a request attribute.  By default, it will be registered under OpenConnectionTask.DEFAULT_ATTRIBUTE_NAME.  Cernunnos SQL tasks will look for a connection under this name as well.  In most cases, therefore, neither parent nor child tasks need specify an attribute name for the Connection object.</p>
            </description>
            <deprecation since="1.0.0">
                <p>Use <a href="Main-sql-datasource-TASK.html">&lt;sql-datasource&gt;</a> instead.</p>
            </deprecation>
        </entry>

        <entry name="sql-datasource" impl="org.danann.cernunnos.sql.DataSourceTask">
            <description>
                <p>Creates a pooled DataSource and registers it as a request attribute.  By default, it will be registered under SqlAttributes.DATA_SOURCE.  Cernunnos SQL tasks will look for a DataSource under this name as well.  In most cases, therefore, neither parent nor child tasks need specify an attribute name for the DataSource object.</p>
            </description>
            <example caption="Connects to a database using the password stored in '/C:/passwd.txt', executes the SQL statement specified by the first argument on the command line">
                <pre><xmp><sql-datasource driver="org.hsqldb.jdbcDriver" url="jdbc:hsqldb:hsql://localhost:8887" username="sa" password="${url(/C:/passwd.txt)}">
  <sql-statement sql="${req($1)}"/>
</sql-datasource></xmp></pre>
            </example>
        </entry>

        <entry name="sql-query" impl="org.danann.cernunnos.sql.QueryTask">
            <description>
                <p>Performs a specified query, then invokes SUBTASKS once for each row in the result set.  For each iteration of SUBTASKS, column values will be registered as request attributes both under (1) the column name (all uppercase), and (2) the column index (starting with 1).</p>
            </description>
            <example caption="Reads database connection information from a properties file, makes a connection, writes each name from the 'users' table to the screen">
                <pre><xmp><properties location="build/WEB-INF/classes/properties/rdbm.properties">
    <sql-datasource driver="${req(jdbcDriver)}" url="${req(jdbcUrl)}" username="${req(jdbcUser)}" password="${req(jdbcPassword)}">
        <sql-query>
            <sql>SELECT user_name FROM users</sql>
            <subtasks>
                <echo>${req(1)}, </echo>
            </subtasks>
        </sql-query>
    </sql-datasource>
</properties></xmp></pre>
            </example>
        </entry>

        <entry name="sql-statement" impl="org.danann.cernunnos.sql.StatementTask">
            <description>
                <p>Executes the specified SQL statement.  By default, this task looks for a Connection object as a request attribute under the name OpenConnectionTask.DEFAULT_ATTRIBUTE_NAME.</p>
            </description>
            <example caption="Connects to a database using the password stored in '/C:/passwd.txt', executes the SQL statement specified by the first argument on the command line">
                <pre><xmp><sql-datasource driver="org.hsqldb.jdbcDriver" url="jdbc:hsqldb:hsql://localhost:8887" username="sa" password="${url(/C:/passwd.txt)}">
  <sql-statement sql="${req($1)}"/>
</sql-datasource></xmp></pre>
            </example>
        </entry>

        <entry name="sql-transaction" impl="org.danann.cernunnos.sql.TransactionTask">
            <description>
                <p>Subtasks that operate on the specified DataSource will be transactional if they use the Cernunnos sql tasks or the Spring JDBC APIs.</p>
            </description>
            <example caption="Loads a Spring bean container defined in 'datasourceContext.xml' which contains a DataSource, then begins a transaction, then queries that DataSource for the 'user_id' associated with the 'admin' account, then performs an 'upsert' operation on the 'up_user_profile' table">
                <pre><xmp><spring-beans location="datasourceContext.xml">
    <with-attribute key="SqlAttributes.DATA_SOURCE" value="${PortalDb}">
        <sql-transaction>
            <sql-upsert>
                <update-statement>UPDATE up_user_profile SET profile_name = 'HTML browser profile' WHERE user_id = ?</update-statement>
                <insert-statement>INSERT INTO up_user_profile(user_id, profile_id, profile_name, description, layout_id, structure_ss_id, theme_ss_id) VALUES(?, 1, 'HTML browser profile', 'A sample profile for common web browsers', 1, 1 1)</insert-statement>
                <parameter value="${sql(SELECT user_id FROM up_user WHERE user_name = 'admin')}"/>
            </sql-upsert>
        </sql-transaction>
    </with-attribute>
</spring-beans></xmp></pre>
            </example>
        </entry>

        <entry name="sql-upsert" impl="org.danann.cernunnos.sql.UpsertTask">
            <description>
                <p>Executes the specified UPDATE statement.  If zero rows are affected, executes the specified INSERT statement.  By default, this task looks for a Connection object as a request attribute under the name OpenConnectionTask.DEFAULT_ATTRIBUTE_NAME.</p>
            </description>
            <example caption="Loads a Spring bean container defined in 'datasourceContext.xml' which contains a DataSource, then begins a transaction, then queries that DataSource for the 'user_id' associated with the 'admin' account, then performs an 'upsert' operation on the 'up_user_profile' table">
                <pre><xmp><spring-beans location="datasourceContext.xml">
    <with-attribute key="SqlAttributes.DATA_SOURCE" value="${PortalDb}">
        <sql-transaction>
            <sql-upsert>
                <update-statement>UPDATE up_user_profile SET profile_name = 'HTML browser profile' WHERE user_id = ?</update-statement>
                <insert-statement>INSERT INTO up_user_profile(user_id, profile_id, profile_name, description, layout_id, structure_ss_id, theme_ss_id) VALUES(?, 1, 'HTML browser profile', 'A sample profile for common web browsers', 1, 1 1)</insert-statement>
                <parameter value="${sql(SELECT user_id FROM up_user WHERE user_name = 'admin')}"/>
            </sql-upsert>
        </sql-transaction>
    </with-attribute>
</spring-beans></xmp></pre>
            </example>
        </entry>
                
        <!--
          | Package:  xml
          +-->

        <entry name="append-node" impl="org.danann.cernunnos.xml.AppendNodeTask">
            <description>
                <p>Adds the specified XML content to the specified PARENT (at the end) or after the specified SIBLING.</p>
                <p>See also: <a href="Main-prepend-node-TASK.html">&lt;prepend-node&gt;</a></p>
            </description>
            <example caption="Creates a new XML document containing '&lt;example foo=&quot;bar&quot;/&gt;', then writes it to the file 'example.xml'">
                <pre><xmp><with-attribute key="Attributes.NODE" value="${newDoc(example)}">
    <append-node node="${attributeNode(foo=bar)}"/>
    <write-document file="example.xml"/>
</with-attribute></xmp></pre>
            </example>
            <example caption="Parses the 'books.xml' document, adds a '&lt;book&gt;' child element, places a comment before the '&lt;book&gt;' element, then writes the file back to the same location">
                <pre><xmp><with-attribute key="Attributes.NODE" value="${parseXml(example.xml)}">
    <append-node>
        <book author="George Eliot">
            <title>Middlemarch</title>
        </book>
    </append-node>
    <prepend-node node="${commentNode(This is a great book!)}" sibling="${singleNode(book)}"/>
    <write-document file="books.xml"/>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="attributeNode" impl="org.danann.cernunnos.xml.AttributeNodePhrase">
            <description>
                <p>Creates a new XML attribute node from the specified TUPLE, 
                which must contain an equals character ('=') to distinguish 
                the name from the value of the attribute.</p>
                <p><code>${attributeNode}</code> is based on the 
                <a href="http://www.dom4j.org/" target="_new">dom4j API for XML</a>.
                The attribute created by this phrase is an instance of 
                <code>org.dom4j.Attribute</code>.</p>
            </description>
            <example caption="Creates a new XML document containing '&lt;example foo=&quot;bar&quot;/&gt;', then writes it to the file 'example.xml'">
                <pre><xmp><with-attribute key="Attributes.NODE" value="${newDoc(example)}">
    <append-node node="${attributeNode(foo=bar)}"/>
    <write-document file="example.xml"/>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="commentNode" impl="org.danann.cernunnos.xml.CommentNodePhrase">
            <description>
                <p>Creates a new XML comment node from the specified VALUE.</p>
            </description>
            <example caption="Parses the 'books.xml' document, adds a '&lt;book&gt;' child element, places a comment before the '&lt;book&gt;' element, then writes the file back to the same location">
                <pre><xmp><with-attribute key="Attributes.NODE" value="${parseXml(example.xml)}">
    <append-node>
        <book author="George Eliot">
            <title>Middlemarch</title>
        </book>
    </append-node>
    <prepend-node node="${commentNode(This is a great book!)}" sibling="${singleNode(book)}"/>
    <write-document file="books.xml"/>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="delete-node" impl="org.danann.cernunnos.xml.DeleteNodeTask">
            <description>
                <p>Deletes the specified node from the document that contains it.  This change must be persisted by another task (if persistence is desired).</p>
            </description>
        </entry>

        <entry name="doc" impl="org.danann.cernunnos.xml.ReadDocumentPhrase">
            <description>
                <p>Parses an XML Document from the specified <code>LOCATION</code> 
                and returns the root element.  The identified resource must be 
                parsable XML.</p>
            </description>
            <deprecation since="1.1.0">
                <p>Use <a href="Main-parseXml-PHRASE.html">${parseXml}</a> instead.</p>
            </deprecation>
        </entry>

        <entry name="newDoc" impl="org.danann.cernunnos.xml.NewDocumentPhrase">
            <description>
                <p>Creates a new XML Document.  If provided, this task also creates a root element with the specified NAME.  This task return either the root element (if present) or the document node.</p>
            </description>
            <example caption="Creates a new XML document containing '&lt;example foo=&quot;bar&quot;/&gt;', then writes it to the file 'example.xml'">
                <pre><xmp><with-attribute key="Attributes.NODE" value="${newDoc(example)}">
    <append-node node="${attributeNode(foo=bar)}"/>
    <write-document file="example.xml"/>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="node-iterator" impl="org.danann.cernunnos.xml.NodeIteratorTask">
            <description>
                <p>Iterates over the node list resulting from the specified XPath expression.  For each node in the list, this task will set the specified request attribute and then execute its subtasks.</p>
            </description>
            <example caption="Parses a document from the resource at 'properties/db/data.xml', creates a node list from the expression '//table/name', and writes the text value of each node to System.out">
                <pre><xmp><node-iterator source="${parseXml(properties/db/data.xml)}" xpath="//table/name">
  <echo-ln>${valueOf(.)}</echo-ln>
</node-iterator></xmp></pre>
            </example>
        </entry>

        <entry name="parseXml" impl="org.danann.cernunnos.xml.ParseXmlPhrase">
            <description>
                <p>Parses an XML Document from the specified <code>LOCATION</code> 
                and returns the root element.  The identified resource must be 
                parsable XML.</p>
                <p>This task leverages the <code>ResourceHelper</code> API and 
                is a replacement for <code>${doc}</code>, which will not use that 
                API for reasons of backward compatability.</p>
            </description>
            <example caption="Parses the 'books.xml' document, adds a '&lt;book&gt;' child element, places a comment before the '&lt;book&gt;' element, then writes the file back to the same location">
                <pre><xmp><with-attribute key="Attributes.NODE" value="${parseXml(example.xml)}">
    <append-node>
        <book author="George Eliot">
            <title>Middlemarch</title>
        </book>
    </append-node>
    <prepend-node node="${commentNode(This is a great book!)}" sibling="${singleNode(book)}"/>
    <write-document file="books.xml"/>
</with-attribute></xmp></pre>
            </example>
            <example caption="Parses a document from the resource at 'properties/db/data.xml', creates a node list from the expression '//table/name', and writes the text value of each node to System.out">
                <pre><xmp><node-iterator source="${parseXml(properties/db/data.xml)}" xpath="//table/name">
  <echo-ln>${valueOf(.)}</echo-ln>
</node-iterator></xmp></pre>
            </example>
        </entry>

        <entry name="prepend-node" impl="org.danann.cernunnos.xml.PrependNodeTask">
            <description>
                <p>Adds the specified XML content to the specified PARENT (at the beginning) or before the specified SIBLING.</p>
                <p>See also: <a href="Main-append-node-TASK.html">&lt;append-node&gt;</a></p>
            </description>
            <example caption="Parses the 'books.xml' document, adds a '&lt;book&gt;' child element, places a comment before the '&lt;book&gt;' element, then writes the file back to the same location">
                <pre><xmp><with-attribute key="Attributes.NODE" value="${parseXml(example.xml)}">
    <append-node>
        <book author="George Eliot">
            <title>Middlemarch</title>
        </book>
    </append-node>
    <prepend-node node="${commentNode(This is a great book!)}" sibling="${singleNode(book)}"/>
    <write-document file="books.xml"/>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="singleNode" impl="org.danann.cernunnos.xml.SingleNodePhrase">
            <description>
                <p>Returns the first node that matches the specified XPATH expression when evaluated against the SOURCE node.</p>
            </description>
            <example caption="Parses the 'books.xml' document, adds a '&lt;book&gt;' child element, places a comment before the '&lt;book&gt;' element, then writes the file back to the same location">
                <pre><xmp><with-attribute key="Attributes.NODE" value="${parseXml(example.xml)}">
    <append-node>
        <book author="George Eliot">
            <title>Middlemarch</title>
        </book>
    </append-node>
    <prepend-node node="${commentNode(This is a great book!)}" sibling="${singleNode(book)}"/>
    <write-document file="books.xml"/>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="textNode" impl="org.danann.cernunnos.xml.TextNodePhrase">
            <description>
                <p>Creates a new XML text node from the specified VALUE.</p>
            </description>
        </entry>

        <entry name="valueOf" impl="org.danann.cernunnos.xml.ValueOfPhrase">
            <description>
                <p>Returns the textual value of the specified XPath expression when evaluated against the specified node.</p>
            </description>
            <example caption="Parses a document from the resource at 'properties/db/data.xml', creates a node list from the expression '//table/name', and writes the text value of each node to System.out">
                <pre><xmp><node-iterator source="${parseXml(properties/db/data.xml)}" xpath="//table/name">
  <echo-ln>${valueOf(.)}</echo-ln>
</node-iterator></xmp></pre>
        </example>
        </entry>

        <entry name="write-document" impl="org.danann.cernunnos.xml.WriteDocumentTask">
            <description>
                <p>Writes the specified source node to the specified file system location.</p>
            </description>
            <example caption="Creates a new XML document containing '&lt;example foo=&quot;bar&quot;/&gt;', then writes it to the file 'example.xml'">
                <pre><xmp><with-attribute key="Attributes.NODE" value="${newDoc(example)}">
    <append-node node="${attributeNode(foo=bar)}"/>
    <write-document file="example.xml"/>
</with-attribute></xmp></pre>
            </example>
            <example caption="Parses the 'books.xml' document, adds a '&lt;book&gt;' child element, places a comment before the '&lt;book&gt;' element, then writes the file back to the same location">
                <pre><xmp><with-attribute key="Attributes.NODE" value="${parseXml(example.xml)}">
    <append-node>
        <book author="George Eliot">
            <title>Middlemarch</title>
        </book>
    </append-node>
    <prepend-node node="${commentNode(This is a great book!)}" sibling="${singleNode(book)}"/>
    <write-document file="books.xml"/>
</with-attribute></xmp></pre>
            </example>
        </entry>

        <entry name="xslt" impl="org.danann.cernunnos.xml.XslTransformTask">
            <description>
                <p>Executes the specified XSL Transformation.  By default, this task uses the value of the 'Attributes.NODE' request attribute as the XML source, and places the result of the trasformation under the same request attribute for subtasks.</p>
            </description>
            <example caption="Creates the documentation you are reading (when executed from the root of a Cernunnos source tree)">
                <pre><xmp><serialize-grammar>
    <file-iterator dir="media/grammardoc" excludes="**/*.xsl">
        <copy-file to-dir="docs/grammardoc"/>
    </file-iterator>
    <xslt stylesheet="media/grammardoc/table-of-contents.xsl" to-file="docs/grammardoc/table-of-contents.html"/>
    <node-iterator xpath="entry">
        <xslt stylesheet="media/grammardoc/entry.xsl" to-file="docs/grammardoc/entries/${valueOf(name)}.html"/>
    </node-iterator>
</serialize-grammar></xmp></pre>
            </example>
        </entry>

    </entries>

    <subtasks>
        <return value="${grammar()}"/>
    </subtasks>

</org.danann.cernunnos.runtime.EncloseGrammarTask>
